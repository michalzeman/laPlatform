akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  #log-config-on-start = on

  # Logging of Dead Letters
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  actor {
    //provider = "akka.cluster.ClusterActorRefProvider"

    default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 4
    }

    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on
    }

    deployment {
      /ingestKafkaProducerSupervisorActor/kafkaIngestProducer {
        router = round-robin-pool
        nr-of-instances = 2
      }
    }
  }

  remote {
    # The port clients should connect to. Default is 2552.
    netty.tcp.port = 4711

  }
}

http {
  interface="0.0.0.0"
  port = 8080
  port = ${?PORT}
}

kafka {
  bootstrap.servers="localhost:9092"
  bootstrap.servers=${?VALUE}
  client.id="KafkaIngestProducer"
  client.id=${?VALUE}
  key.serializer="org.apache.kafka.common.serialization.IntegerSerializer"
  key.serializer=${?VALUE}
  value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  value.serializer=${?VALUE}
  ingest.topic="ingest-data"
  ingest.topic=${?VALUE}
}

